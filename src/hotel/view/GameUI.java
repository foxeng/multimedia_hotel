package hotel.view;

import hotel.model.Game;
import hotel.model.Hotel;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.font.TextAttribute;
import java.util.Map;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;

@SuppressWarnings("serial")
public class GameUI extends javax.swing.JFrame {

    /**
     * NOTE: it would be better to implement the observer pattern (this as the
     * observer, Game as the observable, either directly or using JavaBeans.
     */
    private Game model;
    private final Timer timer;
    private final Color[] playerColors = {Color.BLUE, Color.RED, Color.GREEN};

    private class timerActionListener implements ActionListener {

        private int totalMinutes = -1;

        @Override
        public void actionPerformed(ActionEvent _e) {
            totalMinutes++;
            String s = String.format("Total Time: %02d:%02d", totalMinutes / 60, totalMinutes % 60);
            timeLabel.setText(s);
        }
    }

    /**
     *
     */
    public GameUI() {
        javax.swing.SwingUtilities.invokeLater(() -> {
            initComponents();
            setLocationRelativeTo(null);  // center window on screen
        });
        model = new Game(this);
        timer = new Timer(60 * 1000, new timerActionListener());
        timer.setInitialDelay(0);  // fire the first event immediately to initialize the time display
        timer.start();
        javax.swing.SwingUtilities.invokeLater(() -> {
            setVisible(true);   // move to main?
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        p1Label = new javax.swing.JLabel();
        p2Label = new javax.swing.JLabel();
        p3Label = new javax.swing.JLabel();
        availableHotelsLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        board = new hotel.view.BoardUI();
        controlsPanel = new javax.swing.JPanel();
        nextRoundButton = new javax.swing.JButton();
        reqMoneyButton = new javax.swing.JButton();
        buyEntranceButton = new javax.swing.JButton();
        buyHotelButton = new javax.swing.JButton();
        reqBuildingButton = new javax.swing.JButton();
        diceLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        gameMenu = new javax.swing.JMenu();
        startMenuItem = new javax.swing.JMenuItem();
        stopMenuItem = new javax.swing.JMenuItem();
        cardsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        statisticsMenu = new javax.swing.JMenu();
        hotelsMenuItem = new javax.swing.JMenuItem();
        entrancesMenuItem = new javax.swing.JMenuItem();
        profitsMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MediaLab Hotel");

        p1Label.setForeground(getPlayerColor(1));
        p1Label.setText("Player 1");

        p2Label.setForeground(getPlayerColor(2));
        p2Label.setText("Player 2");

        p3Label.setForeground(getPlayerColor(3));
        p3Label.setText("Player 3");

        availableHotelsLabel.setText("Available Hotels");

        timeLabel.setText("Total Time");

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(p1Label)
                .addGap(18, 18, 18)
                .addComponent(p2Label)
                .addGap(18, 18, 18)
                .addComponent(p3Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(availableHotelsLabel)
                .addGap(18, 18, 18)
                .addComponent(timeLabel)
                .addContainerGap())
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(p3Label)
                .addComponent(p1Label)
                .addComponent(p2Label)
                .addComponent(availableHotelsLabel)
                .addComponent(timeLabel))
        );

        board.setPreferredSize(new java.awt.Dimension(600, 480));

        javax.swing.GroupLayout boardLayout = new javax.swing.GroupLayout(board);
        board.setLayout(boardLayout);
        boardLayout.setHorizontalGroup(
            boardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        boardLayout.setVerticalGroup(
            boardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        controlsPanel.setPreferredSize(new java.awt.Dimension(250, 250));

        nextRoundButton.setText("Next round");
        nextRoundButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextRoundButtonActionPerformed(evt);
            }
        });

        reqMoneyButton.setText("Request money from Bank");
        reqMoneyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqMoneyButtonActionPerformed(evt);
            }
        });

        buyEntranceButton.setText("Buy entrance");
        buyEntranceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyEntranceButtonActionPerformed(evt);
            }
        });

        buyHotelButton.setText("Buy hotel");
        buyHotelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyHotelButtonActionPerformed(evt);
            }
        });

        reqBuildingButton.setText("Request building");
        reqBuildingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqBuildingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlsPanelLayout = new javax.swing.GroupLayout(controlsPanel);
        controlsPanel.setLayout(controlsPanelLayout);
        controlsPanelLayout.setHorizontalGroup(
            controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlsPanelLayout.createSequentialGroup()
                        .addComponent(buyHotelButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(controlsPanelLayout.createSequentialGroup()
                        .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(reqMoneyButton)
                            .addComponent(reqBuildingButton)
                            .addGroup(controlsPanelLayout.createSequentialGroup()
                                .addComponent(nextRoundButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(diceLabel))
                            .addComponent(buyEntranceButton))
                        .addContainerGap(57, Short.MAX_VALUE))))
        );
        controlsPanelLayout.setVerticalGroup(
            controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(diceLabel)
                    .addComponent(nextRoundButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reqMoneyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buyHotelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reqBuildingButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buyEntranceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(297, 297, 297))
        );

        gameMenu.setText("Game");

        startMenuItem.setText("Start");
        startMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(startMenuItem);

        stopMenuItem.setText("Stop");
        stopMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(stopMenuItem);

        cardsMenuItem.setText("Cards");
        cardsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardsMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(cardsMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(exitMenuItem);

        menuBar.add(gameMenu);

        statisticsMenu.setText("Statistics");

        hotelsMenuItem.setText("Hotels");
        hotelsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hotelsMenuItemActionPerformed(evt);
            }
        });
        statisticsMenu.add(hotelsMenuItem);

        entrancesMenuItem.setText("Entrances");
        entrancesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entrancesMenuItemActionPerformed(evt);
            }
        });
        statisticsMenu.add(entrancesMenuItem);

        profitsMenuItem.setText("Profits");
        profitsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profitsMenuItemActionPerformed(evt);
            }
        });
        statisticsMenu.add(profitsMenuItem);

        menuBar.add(statisticsMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(board, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(controlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(board, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(controlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextRoundButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextRoundButtonActionPerformed
        model.playRound();
    }//GEN-LAST:event_nextRoundButtonActionPerformed

    private void reqMoneyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqMoneyButtonActionPerformed
        model.requestMoney();
    }//GEN-LAST:event_reqMoneyButtonActionPerformed

    private void buyEntranceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyEntranceButtonActionPerformed
        String s = JOptionPane.showInputDialog(this, "Enter the ID of the hotel to add an entrance to", "Enter hotel ID", JOptionPane.QUESTION_MESSAGE);
        try {
            int hid = Integer.parseInt(s);
            if (model.buyEntrance(hid)) {
                board.repaint();
                JOptionPane.showMessageDialog(this, "The request was satisfied", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else
                JOptionPane.showMessageDialog(this, "The request could not be satisfied", "Failure", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException _e) {
            JOptionPane.showMessageDialog(this, "The hotel ID should be an integer", "Wrong input", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_buyEntranceButtonActionPerformed

    private void buyHotelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyHotelButtonActionPerformed
        String s = JOptionPane.showInputDialog(this, "Enter the ID of the hotel to buy", "Enter hotel ID", JOptionPane.QUESTION_MESSAGE);
        try {
            int hid = Integer.parseInt(s);
            if (model.buyHotel(hid)) {
                board.repaint();
                JOptionPane.showMessageDialog(this, "The request was satisfied", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else
                JOptionPane.showMessageDialog(this, "The request could not be satisfied", "Failure", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException _e) {
            JOptionPane.showMessageDialog(this, "The hotel ID should be an integer", "Wrong input", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_buyHotelButtonActionPerformed

    private void reqBuildingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqBuildingButtonActionPerformed
        String s = JOptionPane.showInputDialog(this, "Enter the ID of the hotel to build", "Enter hotel ID", JOptionPane.QUESTION_MESSAGE);
        try {
            int hid = Integer.parseInt(s);
            if (model.requestBuilding(hid)) {
                board.repaint();
                JOptionPane.showMessageDialog(this, "The request was satisfied", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else
                JOptionPane.showMessageDialog(this, "The request could not be satisfied", "Failure", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException _e) {
            JOptionPane.showMessageDialog(this, "The hotel ID should be an integer", "Wrong input", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_reqBuildingButtonActionPerformed

    private void startMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startMenuItemActionPerformed
        setInteractivityEnabled(true);  // this should happen before the new model is created, because the model may need to override (disable buttons)
        diceLabel.setText("");
        model = new Game(this);
        board.repaint();
        timer.stop();
        timer.removeActionListener(timer.getActionListeners()[0]);
        timer.addActionListener(new timerActionListener());
        timer.restart();
    }//GEN-LAST:event_startMenuItemActionPerformed

    private void stopMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopMenuItemActionPerformed
        stop();
    }//GEN-LAST:event_stopMenuItemActionPerformed

    private void cardsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardsMenuItemActionPerformed
        String s = JOptionPane.showInputDialog(this, "Enter the ID of a hotel to read its card", "Enter hotel ID", JOptionPane.QUESTION_MESSAGE);
        try {
            int hid = Integer.parseInt(s);
            Hotel h = model.getHotel(hid);
            StringBuilder sb = new StringBuilder();
            sb.append("Name: ").append(h.getName()).append("\n");
            sb.append("Buying cost: ").append(h.getBuyingCost()).append(" (").append(h.getObligBuyingCost()).append(" if buying from another player)\n");
            sb.append("Entrance cost: ").append(h.getEntranceCost()).append("\n");
            int[] bcs = h.getBuildingCosts();
            int[] scs = h.getStayingCosts();
            sb.append("Basic building cost, cost per night: ").append(bcs[0]).append(", ").append(scs[0]).append("\n");
            for (int i = 1; i < bcs.length - 1; i++)
                sb.append("Upgrade #").append(i).append(" cost, cost per night: ").append(bcs[i]).append(", ").append(scs[i]).append("\n");
            sb.append("Outside space cost, cost per night: ").append(bcs[bcs.length - 1]).append(", ").append(scs[bcs.length - 1]).append("\n");
            JOptionPane.showMessageDialog(this, sb.toString(), "Hotel card", JOptionPane.PLAIN_MESSAGE);
        } catch (NumberFormatException _e) {
            JOptionPane.showMessageDialog(this, "The hotel ID should be an integer", "Wrong input", JOptionPane.WARNING_MESSAGE);
        } catch (NullPointerException _e) {
            JOptionPane.showMessageDialog(this, "The hotel ID should be among the ones shown", "Invalid hotel ID", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_cardsMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void hotelsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hotelsMenuItemActionPerformed
        StringBuilder sb = new StringBuilder();
        for (int hid : model.getHotelIds()) {
            Hotel h = model.getHotel(hid);
            sb.append("Name, Owner, Max build, Current build: ");
            sb.append(h.getName()).append(", ");
            int owner = h.getOwnerId();
            sb.append((owner > 0) ? owner : "None").append(", ");
            sb.append(h.getBuildingCosts().length - 1).append(", ");
            sb.append(h.getCurrentBuild()).append("\n");
        }
        JOptionPane.showMessageDialog(this, sb.toString(), "Hotels info", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_hotelsMenuItemActionPerformed

    private void entrancesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entrancesMenuItemActionPerformed
        int[] entrances = model.getPlayersEntrances();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < entrances.length; i++)
            sb.append("Player ").append(i + 1).append(": ").append(entrances[i]).append("\n");
        JOptionPane.showMessageDialog(this, sb.toString(), "Player entrances", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_entrancesMenuItemActionPerformed

    private void profitsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profitsMenuItemActionPerformed
        int[] maxMoney = model.getPlayersMaxMoney();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < maxMoney.length; i++)
            sb.append("Player ").append(i + 1).append(": ").append(maxMoney[i]).append("\n");
        JOptionPane.showMessageDialog(this, sb.toString(), "Max player money", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_profitsMenuItemActionPerformed

    private void setEnabledRecursive(Component c, boolean e) {
        c.setEnabled(e);
        if (c instanceof Container)
            for (Component ch : ((Container) c).getComponents()) // OK to call getComponents in the EDT

                setEnabledRecursive(ch, e);
    }

    private void setInteractivityEnabled(boolean e) {
        javax.swing.SwingUtilities.invokeLater(() -> {
            setEnabledRecursive(topPanel, e);
            setEnabledRecursive(controlsPanel, e);
            setEnabledRecursive(board, e);
            setEnabledRecursive(statisticsMenu, e);
            setEnabledRecursive(stopMenuItem, e);
            setEnabledRecursive(cardsMenuItem, e);
        });

    }

    private void stop() {
        timer.stop();
        setInteractivityEnabled(false);
    }

    private JLabel getPlayerLabel(int p) {
        switch (p) {
            case 1:
                return p1Label;
            case 2:
                return p2Label;
            case 3:
                return p3Label;
        }
        return null;
    }

    Color getPlayerColor(int p) {
        return playerColors[p - 1];
    }

    Game getModel() {
        return model;
    }

    /**
     *
     * @param p
     * @param money
     */
    public void setPlayerMoney(int p, int money) {
        JLabel pl = getPlayerLabel(p);
        if (pl == null)
            return;
        javax.swing.SwingUtilities.invokeLater(() -> {
            pl.setText("Player " + p + ": " + money);
        });
    }

    /**
     *
     * @param turns
     */
    public void setPlayerTurns(int[] turns) {
        javax.swing.SwingUtilities.invokeLater(() -> {
            StringBuilder sb = new StringBuilder();
            for (int p : turns)
                sb.append("Player ").append(p).append("\n");
            JOptionPane.showMessageDialog(this, sb.toString(), "Player turns", JOptionPane.INFORMATION_MESSAGE);
        });
    }

    /**
     *
     * @param p
     */
    public void setCurrentPlayer(int p) {
        // TODO: why don't bankrupt players stay strikethrough?
        javax.swing.SwingUtilities.invokeLater(() -> {
            Font f1 = p1Label.getFont();
            Font f2 = p2Label.getFont();
            Font f3 = p3Label.getFont();
            Map<TextAttribute, Integer> plain = Map.of(TextAttribute.UNDERLINE, -1);
            Map<TextAttribute, Integer> underlined = Map.of(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            p1Label.setFont((p == 1) ? f1.deriveFont(underlined) : f1.deriveFont(plain));
            p2Label.setFont((p == 2) ? f2.deriveFont(underlined) : f2.deriveFont(plain));
            p3Label.setFont((p == 3) ? f3.deriveFont(underlined) : f3.deriveFont(plain));
        });
    }

    /**
     *
     *
     */
    public void setPlayerMoved() {
        javax.swing.SwingUtilities.invokeLater(board::repaint);
    }

    /**
     *
     * @param p
     */
    public void setPlayerBankrupt(int p) {
        JLabel pl = getPlayerLabel(p);
        if (pl == null)
            return;
        javax.swing.SwingUtilities.invokeLater(() -> {
            pl.setFont(pl.getFont().deriveFont(Map.of(TextAttribute.STRIKETHROUGH, TextAttribute.STRIKETHROUGH_ON)));
            board.repaint();
            JOptionPane.showMessageDialog(this, "Player " + String.valueOf(p) + " went bankrupt!", "Bankruptcy", JOptionPane.INFORMATION_MESSAGE);
        });
    }

    /**
     *
     * @param available
     */
    public void setAvailableHotels(int available) {
        javax.swing.SwingUtilities.invokeLater(() -> {
            availableHotelsLabel.setText("Available Hotels: " + available);
        });
    }

    /**
     *
     * @param dice
     */
    public void setDiceResult(int dice) {
        javax.swing.SwingUtilities.invokeLater(() -> {
            diceLabel.setText("Dice roll: " + dice);
        });
    }

    /**
     *
     * @param e
     */
    public void setRequestMoneyEnabled(boolean e) {
        javax.swing.SwingUtilities.invokeLater(() -> {
            reqMoneyButton.setEnabled(e);
        });
    }

    /**
     *
     * @param e
     */
    public void setBuyHotelEnabled(boolean e) {
        javax.swing.SwingUtilities.invokeLater(() -> {
            buyHotelButton.setEnabled(e);
        });
    }

    /**
     *
     * @param e
     */
    public void setRequestBuildingEnabled(boolean e) {
        javax.swing.SwingUtilities.invokeLater(() -> {
            reqBuildingButton.setEnabled(e);
        });
    }

    /**
     *
     * @param e
     */
    public void setBuyEntranceEnabled(boolean e) {
        javax.swing.SwingUtilities.invokeLater(() -> {
            buyEntranceButton.setEnabled(e);
        });
    }

    /**
     *
     * @param p
     */
    public void setWinner(int p) {
        stop();
        JOptionPane.showMessageDialog(this, "Player " + p + " has won the game!", "Game over", JOptionPane.PLAIN_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel availableHotelsLabel;
    private javax.swing.JPanel board;
    private javax.swing.JButton buyEntranceButton;
    private javax.swing.JButton buyHotelButton;
    private javax.swing.JMenuItem cardsMenuItem;
    private javax.swing.JPanel controlsPanel;
    private javax.swing.JLabel diceLabel;
    private javax.swing.JMenuItem entrancesMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu gameMenu;
    private javax.swing.JMenuItem hotelsMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton nextRoundButton;
    private javax.swing.JLabel p1Label;
    private javax.swing.JLabel p2Label;
    private javax.swing.JLabel p3Label;
    private javax.swing.JMenuItem profitsMenuItem;
    private javax.swing.JButton reqBuildingButton;
    private javax.swing.JButton reqMoneyButton;
    private javax.swing.JMenuItem startMenuItem;
    private javax.swing.JMenu statisticsMenu;
    private javax.swing.JMenuItem stopMenuItem;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
